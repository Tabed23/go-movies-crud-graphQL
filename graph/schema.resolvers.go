package graph
// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	"log"

	"github.com/tabed23/movie-graphql/graph/model"
)

// CreateMovie is the resolver for the createMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.NewMovie) (*model.Movie, error) {
	movie := model.Movie{
		Title: input.Title,
		URL:   input.URL,
	}
	err := r.DB.Table("movies").Create(&movie).Error
	if err != nil {
		log.Fatal(err.Error())
		return nil, err
	}

	return &movie, nil
}

// DeleteMovie is the resolver for the deleteMovie field.
func (r *mutationResolver) DeleteMovie(ctx context.Context, id int) (string, error) {
	m := model.Movie{}

	if err := r.DB.Table("movies").Delete(&m, id).Error; err != nil {
		return "", err
	}
	return fmt.Sprintf("movei with id %d has ben delete", id), nil
}

// UpdateMovie is the resolver for the updateMovie field.
func (r *mutationResolver) UpdateMovie(ctx context.Context, id int, input *model.NewMovie) (string, error) {
	m := model.Movie{
		ID:    id,
		Title: input.Title,
		URL:   input.Title,
	}

	if err := r.DB.Table("movie").Where("id = ?", id).Updates(&m).Error; err != nil {
		return fmt.Sprintf("cannot update the movie with id %d", id), nil
	}

	return fmt.Sprintf("Moive with id %d as been updated", id), nil
}

// GetMovies is the resolver for the GetMovies field.
func (r *queryResolver) GetMovies(ctx context.Context) ([]*model.Movie, error) {
	m := []*model.Movie{}
	if err := r.DB.Table("movies").Find(&m).Error; err != nil {
		return nil, err
	}
	return m, nil
}

// GetOneMovie is the resolver for the getOneMovie field.
func (r *queryResolver) GetOneMovie(ctx context.Context, id int) (*model.Movie, error) {
	m := &model.Movie{}

	if err := r.DB.Table("movies").Where("id = ?", id).Find(&m).Error; err != nil {
		return nil, err
	}

	return m, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
